Mounting /home/guest...
Welcome to foobar version 48-beta (2016-02-16-09:40+0000)

Google has a code challenge ready for you.
Been here before?


This invitation will expire if you close this page.
Mounting /home/jeff.washcloth...
Logged in as jeff.washcloth. Last login: 2015-01-29-17:45+0000.
You can now work on 2 challenges concurrently.
foobar:~/ jeff.washcloth$ ls -l
ls: -l: No such file or directory
foobar:~/ jeff.washcloth$ pwd
/home/jeff.washcloth
foobar:~/ jeff.washcloth$ ls
start_here.txt
foobar:~/ jeff.washcloth$ cat start_here.txt 
Type request to request a challenge. Type help for a list of commands.
foobar:~/ jeff.washcloth$ help

Use the following shell commands:

    cdchange directory [dir_name]
    catprint file [file_name]
    deletemedelete all of your data associated with foobar
    editopen file in editor [file_name]
    feedbackProvide feedback on foobar
    lessprint a file a page at a time [file_name]
    lslist directory contents [dir_name]
    requestrequest new challenge (of type 'tag') [tag]
    statusprint progress
    submitsubmit final solution file for assessment [file_name]
    tagsprint tag list
    verifyruns tests on solution file [file_name]

foobar:~/ jeff.washcloth$  

You have unsaved changes on this file.
Are you sure you want to close? (y/N)

    S Save E Close 

foobar:~/ jeff.washcloth$ status
You've not yet solved a challenge.

foobar:~/ jeff.washcloth$ request
Requesting challenge...
New challenge "origins_and_order" added to your home folder.
Time to solve: 48 hours.

foobar:~/ jeff.washcloth$ ls -l
ls: -l: No such file or directory
foobar:~/ jeff.washcloth$ ls 
origins_and_order
start_here.txt
foobar:~/ jeff.washcloth$ cd origins_and_order/
foobar:~/origins_and_order jeff.washcloth$ ls
readme.txt
constraints.txt
solution.py
solution.java
foobar:~/origins_and_order jeff.washcloth$ cat readme.txt 
Origins and order
=================

What do we know about Professor Boolean's past? It's mostly rumor and conjecture, but a few things are known to be true.

Mad Professor Boolean wasn't always a super villain. Early in his career, he was an average paper pusher, working in an office with some very backwards technology. One of his primary jobs was to carry date cards between departments. One morning, he tripped over a unicycle and dropped his date cards on the floor. He hit his head - and hit upon the idea of breeding an army of zombie rabbits to do his bidding and manage simple tasks. But that comes later. Before he could quit with an explosive YouTube video, the professor had to get his cards back in order.

Aha! It seems he recorded the details of this life-changing event in his diary. Let's try to reproduce his methods:

The goal is to get the date cards back in order. Each set of date cards consists of 3 cards, each with a number written on it. When arranged in some order, the numbers make up the representation of a date, in the form month/day/year. However, sometimes multiple representations will be possible. For example, if the date cards read 1, 1, 99 it could only mean 01/01/99, but if the date cards read 2, 30, 3, it could mean any one of 02/03/30, 03/02/30, or 03/30/02.

Write a function called answer(x, y, z) that takes as input the 3 numbers on the date cards. You may assume that at least one valid representation of a date can be constructed from the cards.

If there is only one valid representation, the function should return it as a string, in the form MM/DD/YY. If there are multiple valid representations, the function should return the string "Ambiguous." Each of x, y, z will be between 1 to 99 inclusive. You may also assume that there are no leap years.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) x = 19
    (int) y = 19
    (int) z = 3
Output:
    (string) "03/19/19"

Inputs:
    (int) x = 2
    (int) y = 30
    (int) z = 3
Output:
    (string) "Ambiguous"

Use verify [file] to test your solution and see how it does. When you are finished editing your code, use submit [file] to submit your answer. If your solution passes the test cases, it will be removed from your home folder.
foobar:~/origins_and_order jeff.washcloth$  

You have unsaved changes on this file.
Are you sure you want to close? (y/N)

    S Save E Close 

01:23:58:27
remaining for "origins_and_order"

    Google About Google Privacy & Terms 


foobar:~/origins_and_order jeff.washcloth$ cat constraints.txt 
Java
====

Your code will be compiled using standard Java 7. It must implement the answer() method in the solution stub.

Execution time is limited. Some classes are restricted (e.g. java.lang.ClassLoader). You will see a notice if you use a restricted class when you verify your solution.

Third-party libraries, input/output operations, spawning threads or processes and changes to the execution environment are not allowed.

Python
======

Your code will run inside a Python 2.7.6 sandbox.

Standard libraries are supported except for bz2, crypt, fcntl, mmap, pwd, pyexpat, select, signal, termios, thread, time, unicodedata, zipimport, zlib.


foobar:~/origins_and_order jeff.washcloth$ cat solution.py 
def​ ​answer(x,​ ​y,​ ​z):
​ ​​ ​​ ​​ ​#​ ​your​ ​code​ ​here
foobar:~/origins_and_order jeff.washcloth$  


Jeff's Pseudo-Code:
===================
for each num in (x, y, z):
    if num <= 0 or num >= 99:
        invalid input; bail out of function altogether
    if 32 <= num <= 99:
        num is of type 'year'
    else if 13 <= num <= 31:
        num is 'month'
    if 1 <= num <= 12:
        num is of type 'day'

